{"slides": [{"slide_number": 1, "title": "Chapter 2: Embedding LLMs in Applications", "subtitle": "Introducing AI Orchestrators", "body": [{"type": "Heading", "content": "The Rise of Prompt Engineering"}, {"type": "Bullet Point", "content": "Andrej Karpathy, former Tesla AI Director, declared \"English is the hottest new programming language.\" "}, {"type": "Bullet Point", "content": "Prompt engineering will be explored in depth in Chapter 4."}, {"type": "Heading", "content": "AI Orchestrators: A New Era in Software"}, {"type": "Bullet Point", "content": "LLMs require both technical and conceptual considerations for application integration."}, {"type": "Bullet Point", "content": "Copilot, a new software category, exemplifies the conceptual aspect."}, {"type": "Bullet Point", "content": "This section delves into technical LLM embedding and orchestration within applications."}]}, {"slide_number": 2, "title": "Key Components of AI Orchestrators", "subtitle": "", "body": [{"type": "Heading", "content": "Shifting Paradigm"}, {"type": "Bullet Point", "content": "Foundation models have simplified AI application development, moving from model creation to model consumption."}, {"type": "Heading", "content": "Challenges and Opportunities"}, {"type": "Bullet Point", "content": "New challenges arise in managing LLM components within application lifecycles."}, {"type": "Bullet Point", "content": "Security threats, such as manipulating LLM instructions, require robust countermeasures."}]}, {"slide_number": 3, "title": "Prompt Engineering: Guiding LLMs", "subtitle": "", "body": [{"type": "Heading", "content": "Definition"}, {"type": "Bullet Point", "content": "Prompt engineering optimizes prompts for diverse applications and research."}, {"type": "Bullet Point", "content": "Prompts guide LLM outputs, offering insights into their capabilities and limitations."}, {"type": "Heading", "content": "Key Aspects of Prompt Engineering"}, {"type": "Bullet Point", "content": "Choosing appropriate words, phrases, symbols, and formats to elicit desired responses."}, {"type": "Bullet Point", "content": "Utilizing parameters, examples, and data sources to influence LLM behavior."}, {"type": "Bullet Point", "content": "Example: Specifying a system message for a 5-year-old audience, e.g., \"Act as a teacher explaining complex concepts to 5-year-old children.\""}]}, {"slide_number": 4, "title": "Architecture of LLM-Powered Applications", "subtitle": "", "body": [{"type": "Image", "content": "Figure 2.5: High-level architecture of LLM-powered applications"}, {"type": "Heading", "content": "Understanding the Components"}, {"type": "Heading", "content": "Models"}, {"type": "Bullet Point", "content": "Two main model categories:"}, {"type": "Bullet Point", "content": "Proprietary LLMs (e.g., GPT-3, GPT-4, Bard): Owned by specific companies, allowing fine-tuning but not retraining from scratch."}, {"type": "Bullet Point", "content": "Open-source LLMs (e.g., Falcon LLM, LLaMA): Freely available, enabling both training and retraining."}, {"type": "Bullet Point", "content": "Chapter 3 dives deeper into LLM selection."}]}, {"slide_number": 5, "title": "Components of LLM-Powered Applications", "subtitle": "Memory, Plug-ins, and Prompts", "body": [{"type": "Heading", "content": "Memory"}, {"type": "Bullet Point", "content": "Enables conversational applications to recall previous interactions for context."}, {"type": "Bullet Point", "content": "Stores and retrieves past interactions in a \"memory\" system."}, {"type": "Bullet Point", "content": "Past interactions can be embedded into VectorDB for additional non-parametric knowledge."}, {"type": "Heading", "content": "Plug-ins"}, {"type": "Bullet Point", "content": "Extend LLM functionality and adapt them to specific tasks."}, {"type": "Bullet Point", "content": "Act as add-ons, enhancing capabilities beyond core language processing."}, {"type": "Bullet Point", "content": "Allow customization for specific needs."}]}, {"slide_number": 6, "title": "Components of LLM-Powered Applications", "subtitle": "Prompts: The Essence of Interaction", "body": [{"type": "Heading", "content": "Prompts"}, {"type": "Bullet Point", "content": "The pivotal component of LLM applications."}, {"type": "Bullet Point", "content": "Two levels of prompt design:"}, {"type": "Bullet Point", "content": "Frontend (user-facing): The user\u2019s natural language input."}, {"type": "Bullet Point", "content": "Backend (hidden): Natural language instructions or \"meta-prompts\" guiding the model\u2019s response."}, {"type": "Bullet Point", "content": "Example: \"Answer only if the question is related to the provided documentation.\""}, {"type": "Heading", "content": "VectorDB: Empowering LLM Understanding"}, {"type": "Bullet Point", "content": "Stores and retrieves information based on vectorized embeddings."}, {"type": "Bullet Point", "content": "Enables semantic search and retrieval based on meaning similarity."}, {"type": "Bullet Point", "content": "Examples: Chroma, Elasticsearch, Milvus, Pinecone, Qdrant, Weaviate, Facebook AI Similarity Search (FAISS)."}, {"type": "Bullet Point", "content": "FAISS is a pioneering vector database for efficient similarity search."}]}, {"slide_number": 7, "title": "AI Orchestrators: Facilitating LLM Integration", "subtitle": "", "body": [{"type": "Heading", "content": "The AI Orchestrator"}, {"type": "Bullet Point", "content": "Lightweight libraries that simplify LLM embedding and orchestration within applications."}, {"type": "Bullet Point", "content": "Emerged in response to the widespread adoption of LLMs."}, {"type": "Heading", "content": "Exploring Popular Orchestrators"}, {"type": "Bullet Point", "content": "LangChain, Semantic Kernel, and Haystack are three prominent frameworks."}]}, {"slide_number": 8, "title": "LangChain: An Open-Source Framework", "subtitle": "", "body": [{"type": "Heading", "content": "LangChain Overview"}, {"type": "Bullet Point", "content": "Launched as an open-source project by Harrison Chase in October 2022."}, {"type": "Bullet Point", "content": "Supports Python and JS/TS."}, {"type": "Bullet Point", "content": "Framework for developing LLM-powered applications that are data-aware and agentic."}, {"type": "Image", "content": "Figure 2.6: LangChain\u2019s components"}]}, {"slide_number": 9, "title": "LangChain Components", "subtitle": "Models, Data Connectors, Memory, Chains, and Agents", "body": [{"type": "Heading", "content": "Core Modules"}, {"type": "Bullet Point", "content": "Models: LLMs or LFMs that power the application, including OpenAI, Azure OpenAI, and Hugging Face models."}, {"type": "Bullet Point", "content": "Data connectors: Retrieve external knowledge (e.g., document loaders, text embedding models)."}, {"type": "Bullet Point", "content": "Memory: Stores short-term and long-term references to user interactions, typically based on vectorized embeddings in VectorDB."}, {"type": "Bullet Point", "content": "Chains: Predetermined sequences of actions and LLM calls for building complex applications."}, {"type": "Bullet Point", "content": "Agents: Drive decision-making, access tools, and adapt actions based on user input and context."}, {"type": "Heading", "content": "LangChain Benefits"}, {"type": "Bullet Point", "content": "Modular abstractions for essential LLM components (prompts, memory, plug-ins)."}]}, {"slide_number": 10, "title": "LangChain Benefits", "subtitle": "Pre-built Chains and Practical Applications", "body": [{"type": "Bullet Point", "content": "Pre-built chains for specific use cases or customization."}, {"type": "Bullet Point", "content": "Hands-on LangChain applications will be explored in Part 2, starting from Chapter 5."}]}, {"slide_number": 11, "title": "Haystack: Building NLP Applications", "subtitle": "", "body": [{"type": "Heading", "content": "Haystack Overview"}, {"type": "Bullet Point", "content": "Python-based framework developed by Deepset (Berlin startup)."}, {"type": "Bullet Point", "content": "Empowers developers to build NLP applications."}, {"type": "Image", "content": "Figure 2.7: Haystack\u2019s components"}]}, {"slide_number": 12, "title": "Haystack Components", "subtitle": "Nodes, Pipelines, Agents, Tools, and DocumentStores", "body": [{"type": "Heading", "content": "Key Components"}, {"type": "Bullet Point", "content": "Nodes: Components for specific tasks (e.g., retriever, reader, generator, summarizer)."}]}, {"slide_number": 13, "title": "Haystack Components", "subtitle": "Pipelines, Agents, Tools, and DocumentStores", "body": [{"type": "Bullet Point", "content": "Pipelines: Sequences of node calls for NLP tasks or resource interaction (querying or indexing pipelines)."}]}, {"slide_number": 14, "title": "Haystack Components", "subtitle": "Agents, Tools, and DocumentStores", "body": [{"type": "Bullet Point", "content": "Agent: Uses LLMs to generate accurate responses to complex queries, with access to tools and adaptive capabilities."}, {"type": "Bullet Point", "content": "Tools: Functions that an agent can call for NLP tasks or resource interaction, organized into toolkits."}, {"type": "Bullet Point", "content": "DocumentStores: Backends for storing and retrieving documents, including VectorDB implementations."}, {"type": "Heading", "content": "Haystack Advantages"}, {"type": "Bullet Point", "content": "User-friendly and straightforward."}, {"type": "Bullet Point", "content": "High-quality documentation for search systems, question-answering, summarization, and conversational AI."}, {"type": "Bullet Point", "content": "End-to-end framework covering the entire LLM project lifecycle."}, {"type": "Bullet Point", "content": "Deployable as a REST API for direct consumption."}]}, {"slide_number": 15, "title": "Semantic Kernel: Function Composition and Pipelines", "subtitle": "", "body": [{"type": "Heading", "content": "Semantic Kernel Overview"}, {"type": "Bullet Point", "content": "Open-source SDK developed by Microsoft (originally in C#, now also available in Python)."}]}, {"slide_number": 16, "title": "Semantic Kernel: Function Composition and Pipelines", "subtitle": "", "body": [{"type": "Bullet Point", "content": "The \"kernel\" acts as the core engine for addressing user input by chaining components into pipelines."}, {"type": "Bullet Point", "content": "Encourages function composition for a modular approach to LLM-powered applications."}]}]}