{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to convert2ppt","text":"<p>Convert your documents to PPT with AI</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://kmkarakaya.github.io/convert2ppt</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#convert2ppt.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>convert2ppt/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello Friends!!!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/kmkarakaya/convert2ppt/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>convert2ppt could always use more documentation, whether as part of the official convert2ppt docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/kmkarakaya/convert2ppt/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up convert2ppt for local development.</p> <ol> <li> <p>Fork the convert2ppt repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/convert2ppt.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv convert2ppt\n$ cd convert2ppt/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 convert2ppt tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/kmkarakaya/convert2ppt/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"convert2ppt/","title":"convert2ppt module","text":"<p>Main module.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#standalone-release","title":"Standalone release","text":"<p>To install convert2ppt as a standalone application (exe), go to dist folder on GitHub:</p> <pre><code>pip install git+https://github.com/kmkarakaya/convert2ppt\n</code></pre>"},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install convert2ppt, run this command in your terminal:</p> <pre><code>pip install convert2ppt\n</code></pre> <p>This is the preferred method to install convert2ppt, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install convert2ppt from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/kmkarakaya/convert2ppt\n</code></pre>"},{"location":"load_pdfs/","title":"load_pdfs module","text":""},{"location":"load_pdfs/#convert2ppt.load_pdfs.load_pdfs","title":"<code>load_pdfs(data_dir)</code>","text":"<p>This function loads all PDF files from a specified directory, extracts the text content from each PDF file,  and offers the user the option to save the extracted text to a .txt file.</p> <p>data_dir (str): The directory from which to load the PDF files.</p> <p>The function performs the following steps: 1. Deletes any non-PDF files in the specified directory. 2. Lists all PDF files in the directory. 3. If no PDF files are found, the function prints a message and exits. 4. If PDF files are found, the function prints a message indicating the number of PDF files found. 5. The function then extracts the text content from each PDF file and appends it to a list of prompts. 6. The function prints a message warning the user that the extracted text may sometimes be garbage and should be reviewed before saving. 7. For each prompt, the function prints the first 100 characters of the extracted text and asks the user if they want to save the content to a .txt file. 8. If the user responds with 'y', the function saves the content to a .txt file in the same directory as the original PDF file. The .txt file has the same name as the PDF file, but with a .txt extension instead of .pdf. 9. If the user responds with anything other than 'y', the function skips the current document and moves on to the next one.</p> Source code in <code>convert2ppt/load_pdfs.py</code> <pre><code>def load_pdfs(data_dir):\n    \"\"\"\n    This function loads all PDF files from a specified directory, extracts the text content from each PDF file, \n    and offers the user the option to save the extracted text to a .txt file.\n\n    Parameters:\n    data_dir (str): The directory from which to load the PDF files.\n\n    The function performs the following steps:\n    1. Deletes any non-PDF files in the specified directory.\n    2. Lists all PDF files in the directory.\n    3. If no PDF files are found, the function prints a message and exits.\n    4. If PDF files are found, the function prints a message indicating the number of PDF files found.\n    5. The function then extracts the text content from each PDF file and appends it to a list of prompts.\n    6. The function prints a message warning the user that the extracted text may sometimes be garbage and should be reviewed before saving.\n    7. For each prompt, the function prints the first 100 characters of the extracted text and asks the user if they want to save the content to a .txt file.\n    8. If the user responds with 'y', the function saves the content to a .txt file in the same directory as the original PDF file. The .txt file has the same name as the PDF file, but with a .txt extension instead of .pdf.\n    9. If the user responds with anything other than 'y', the function skips the current document and moves on to the next one.\n    \"\"\"\n\n    delete_non_pdf_files(data_dir)\n    # open and convert all pdf files in the local directory into a list variable called docs \n    docs = [doc for doc in os.listdir( data_dir) if doc.endswith('.pdf')]    \n\n    #check if there is any pdf in the local folder\n    #if there is no pdf file in the local folder, print 'No PDF files found in the local directory' and exit the function\n    if len(docs) == 0:\n        print('No PDF files found in the {data_dir} directory!')\n        exit()\n    else:\n        print(f\"Found {len(docs)} PDF files in the {data_dir} directory.\")\n\n\n    # generate a list of prompts from the pdf content\n\n    prompts = []\n    for doc in docs:\n        pdf_path = os.path.join(data_dir, doc)\n        text = extract_text_from_pdf(pdf_path)\n        prompts.append(text)\n\n    print(\"\\nIMPORTANT:\")\n    print(f\"Extracted text from PDF files, sometimes, could be garbage.\")\n    print(f\"Please review the extracted text before saving it to a .txt file.\")\n    print(\"Note that we can not create a PowerPoint presentation from garbage text.\\n\")\n    for i in range(len(prompts)):\n        #show the first 100 characters of the extracted text\n        print(f\"Extracted text from '{docs[i]}' starts with:\\n '{prompts[i][:100]}...'\")\n        #ask the user if they want to save the extracted text to a .txt file\n        response = input(f\"\\nDo you want to save the content to a .txt file? (y/n): \")\n        if response.lower() != 'y':\n            print('Skipping this document.')\n            continue\n        filename = docs[i].replace('.pdf','.txt')\n        full_path = os.path.join(data_dir, filename)\n        with open(full_path, 'w', encoding='utf-8') as file:\n            file.write(prompts[i])\n        print(f\"Saved content to '{full_path}'\")\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use convert2ppt in a project:</p> <pre><code>import convert2ppt\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"}]}